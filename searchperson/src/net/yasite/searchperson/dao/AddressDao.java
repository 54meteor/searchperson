package net.yasite.searchperson.dao;import net.yasite.searchperson.entity.AddressEntitiy;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteStatement;import de.greenrobot.dao.AbstractDao;import de.greenrobot.dao.Property;import de.greenrobot.dao.internal.DaoConfig;public class AddressDao extends AbstractDao< AddressEntitiy , Long> {	public static final String TABLENAME = "Address";	public AddressDao(DaoConfig config) {		super(config);	}	public AddressDao(DaoConfig config, DaoSession daoSession) {		super(config, daoSession);	}	public static class Properties { 		public final static Property _id = new Property(0,Long.class,"_id",true,"_ID");		public final static Property Name = new Property(1,String.class,"name",false,"NAME");		public final static Property Token = new Property(2,String.class,"token",false,"TOKEN");		public final static Property Pinyin = new Property(3,String.class,"pinyin",false,"PINYIN");	}	public static void createTable(SQLiteDatabase db, boolean ifNotExists) { 		String constraint = ifNotExists ? "IF NOT EXISTS " : "";		StringBuffer sql = new StringBuffer(0);		sql.append("CREATE TABLE " + constraint + "'" + TABLENAME + "' ( ")		.append("_ID INTEGER PRIMARY KEY ,")		.append("NAME TEXT ,")		.append("TOKEN TEXT ,")		.append("PINYIN TEXT );");		db.execSQL(sql.toString());	}	public static void dropTable(SQLiteDatabase db, boolean ifExists) {		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'" + TABLENAME + "'";		db.execSQL(sql);	}	@Override	protected void bindValues(SQLiteStatement stmt, AddressEntitiy entity) {		if(entity.get_id() != null){			stmt.bindLong(1, entity.get_id());		}		if(entity.getName() != null){			stmt.bindString(2, entity.getName());		}		if(entity.getToken() != null){			stmt.bindString(3, entity.getToken());		}		if(entity.getPinyin() != null){			stmt.bindString(4, entity.getPinyin());		}	}	@Override	protected Long getKey(AddressEntitiy entity) {		if (entity != null) {			return entity.get_id();		} else {			return null;		}	}	@Override	protected boolean isEntityUpdateable() {		return true;	}	@Override	protected Long readKey(Cursor cursor, int offset) {		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);	}	@Override	protected Long updateKeyAfterInsert(AddressEntitiy entity, long rowId) {		entity.set_id(rowId);		return rowId;	}	private AddressEntitiy setEntity(Cursor cursor, AddressEntitiy entity, int offset){		entity.set_id(cursor.getLong(offset + 0));		entity.setName(cursor.getString(offset + 1));		entity.setToken(cursor.getString(offset + 2));		entity.setPinyin(cursor.getString(offset + 3));		return entity;	}	@Override	protected AddressEntitiy readEntity(Cursor cursor, int offset) {		AddressEntitiy entity = new AddressEntitiy();		return setEntity(cursor,entity,offset);	}	@Override	protected void readEntity(Cursor cursor, AddressEntitiy entity, int offset) {		entity = setEntity(cursor,entity,offset);	}}